{
  "metadata": {
    "language": "ko_KR",
    "name": "한국어",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:20:29.364320",
    "total_items": 118,
    "build_cost": 1e-06,
    "quality_score": 0.995
  },
  "commands": {
    "document": "특정 컴포넌트, 기능 또는 피처에 대한 정밀하고 집중적인 문서를 생성합니다.",
    "spawn": "복잡한 요청을 관리 가능한 하위 작업으로 분해하고 실행을 조정합니다.",
    "estimate": "복잡성 분석을 기반으로 작업, 피처 또는 프로젝트에 대한 정확한 개발 예상치를 생성합니다.",
    "i18n": "허용된 도구: [읽기, 쓰기, Bash, Todo쓰기]",
    "implement": "지능적인 전문가 활성화 및 포괄적인 개발 지원을 통해 피처, 컴포넌트 및 코드 기능을 구현합니다.",
    "troubleshoot": "코드, 빌드, 배포 또는 시스템 동작의 문제를 체계적으로 진단하고 해결합니다.",
    "improve": "코드 품질, 성능, 유지보수성 및 모범 사례에 대한 체계적인 개선을 적용합니다.",
    "explain": "코드 기능, 개념 또는 시스템 동작에 대한 명확하고 포괄적인 설명을 제공합니다.",
    "analyze": "품질, 보안, 성능 및 아키텍처 영역 전반에 걸쳐 포괄적인 코드 분석을 실행합니다.",
    "workflow": "제품 요구사항 문서(PRD) 및 피처 사양을 분석하여 전문가 지침, 종속성 매핑 및 자동화된 작업 오케스트레이션을 통해 포괄적인 단계별 구현 워크플로를 생성합니다.",
    "load": "프로젝트 컨텍스트, 구성, 종속성 및 환경 설정을 로드하고 분석합니다.",
    "index": "포괄적인 프로젝트 문서, 인덱스 및 지식 기반을 생성하고 유지 관리합니다.",
    "build": "포괄적인 오류 처리 및 최적화를 통해 프로젝트를 빌드, 컴파일 및 패키징합니다.",
    "git": "지능적인 커밋 메시지, 브랜치 관리 및 워크플로 최적화를 통해 Git 작업을 실행합니다.",
    "task": "지능적인 워크플로 관리, 세션 간 지속성, 계층적 작업 구성 및 고급 오케스트레이션 기능을 통해 복잡한 작업을 실행합니다.",
    "design": "시스템 아키텍처, API, 컴포넌트 인터페이스 및 기술 사양을 설계합니다.",
    "cleanup": "코드를 체계적으로 정리하고, 사용되지 않는 코드를 제거하고, 임포트를 최적화하고, 프로젝트 구조를 개선합니다.",
    "test": "테스트를 실행하고, 포괄적인 테스트 보고서를 생성하고, 테스트 커버리지 표준을 유지 관리합니다."
  },
  "personas": {
    "architect": "시스템 아키텍처 전문가, 장기적 사고 중점, 확장성 전문가",
    "frontend": "UX 전문가, 접근성 옹호자, 성능 의식 개발자",
    "backend": "신뢰성 엔지니어, API 전문가, 데이터 무결성 중점",
    "analyzer": "근본 원인 전문가, 증거 기반 조사관, 체계적 분석가",
    "security": "위협 모델러, 규정 준수 전문가, 취약점 전문가",
    "mentor": "지식 이전 전문가, 교육자, 문서화 옹호자",
    "refactorer": "코드 품질 전문가, 기술 부채 관리자, 클린 코드 옹호자",
    "performance": "최적화 전문가, 병목 현상 제거 전문가, 지표 기반 분석가",
    "qa": "품질 옹호자, 테스트 전문가, 엣지 케이스 탐정",
    "devops": "인프라 전문가, 배포 전문가, 신뢰성 엔지니어"
  },
  "ui": {
    "ui_extracted_0": "\nSuperClaude 설치 시스템용 사용자 인터페이스 유틸리티\n색상 및 진행률 표시 기능이 있는 크로스 플랫폼 콘솔 UI\n",
    "ui_extracted_21": "\n    RED = Fore.RED\n    GREEN = Fore.GREEN\n    YELLOW = Fore.YELLOW\n    BLUE = Fore.BLUE\n    MAGENTA = Fore.MAGENTA\n    CYAN = Fore.CYAN\n    WHITE = Fore.WHITE\n    RESET = Style.RESET_ALL\n    BRIGHT = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "사용자 정의 가능한 디스플레이를 갖춘 크로스 플랫폼 진행률 표시줄",
    "ui_extracted_26": "\n        진행률 표시줄 초기화\n        \n        인수:\n            total: 처리할 총 항목 수\n            width: 진행률 표시줄의 문자 너비\n            prefix: 진행률 표시줄 앞에 표시할 텍스트\n            suffix: 진행률 표시줄 뒤에 표시할 텍스트\n        ",
    "ui_extracted_29": "\n        진행률 표시줄 업데이트\n        \n        인수:\n            current: 현재 진행률 값\n            message: 선택적 메시지\n        ",
    "ui_extracted_34": "\n        \n        # 진행 줄 형식 지정\n        if message:\n            status = f",
    "ui_extracted_36": "\n        \n        progress_line = (\n            f",
    "ui_extracted_38": "\n        )\n        \n        # 터미널에 너무 길면 잘라내기\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # 길이 계산을 위해 색상 코드 제거\n            plain_line = progress_line.replace(Colors.GREEN, ",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + ",
    "ui_extracted_42": "\n        \n        print(progress_line, end=",
    "ui_extracted_45": "\n        진행률을 1씩 증가\n        \n        인수:\n            message: 선택적 메시지\n        ",
    "ui_extracted_48": "\n        진행률 표시줄 완료\n        \n        인수:\n            message: 완료 메시지\n        ",
    "ui_extracted_56": "\n    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "\n        메뉴 초기화\n        \n        인수:\n            title: 메뉴 제목\n            options: 메뉴 옵션 목록\n            multi_select: 다중 선택 허용 여부\n        ",
    "ui_extracted_58": "\n        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "\n        메뉴를 표시하고 사용자 선택을 가져옵니다.\n        \n        반환:\n            선택된 옵션 인덱스(단일) 또는 인덱스 목록(다중 선택)\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = ",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else ",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == ",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "성공 메시지 표시",
    "ui_extracted_110": "단계 진행률 표시",
    "welcome": "SuperClaude 설치 마법사에 오신 것을 환영합니다",
    "installation_success": "설치가 성공적으로 완료되었습니다!",
    "installation_failed": "설치에 실패했습니다. 로그를 확인하십시오.",
    "select_components": "설치할 컴포넌트를 선택하십시오:",
    "config_saved": "구성이 성공적으로 저장되었습니다",
    "loading": "로딩 중...",
    "processing": "요청 처리 중...",
    "analyzing": "코드 분석 중...",
    "building": "프로젝트 빌드 중...",
    "completed": "작업이 성공적으로 완료되었습니다",
    "cancelled": "사용자에 의해 작업이 취소되었습니다",
    "please_wait": "요청을 처리하는 동안 잠시 기다려 주십시오",
    "choose_option": "옵션을 선택하십시오:",
    "confirm_action": "계속하시겠습니까?",
    "click_continue": "클릭하여 계속",
    "ready": "준비됨",
    "busy": "사용 중",
    "connected": "연결됨",
    "disconnected": "연결 끊김"
  },
  "errors": {
    "error_settings_manager_0": "존재하지 않는 설정 파일을 백업할 수 없습니다.",
    "file_not_found": "파일을 찾을 수 없습니다: {filename}",
    "permission_denied": "권한이 거부되었습니다. 파일 권한을 확인하십시오.",
    "file_already_exists": "파일이 이미 존재합니다: {filename}",
    "directory_not_found": "디렉터리를 찾을 수 없습니다: {dirname}",
    "connection_failed": "연결에 실패했습니다. 네트워크를 확인하십시오.",
    "connection_timeout": "연결 시간이 초과되었습니다. 다시 시도하십시오.",
    "api_error": "API 요청이 오류와 함께 실패했습니다: {error}",
    "rate_limit_exceeded": "요청 한도를 초과했습니다. 나중에 다시 시도하십시오.",
    "invalid_config": "잘못된 구성 형식입니다.",
    "missing_config": "구성 파일을 찾을 수 없습니다.",
    "config_parse_error": "구성 파일 구문 분석 오류입니다.",
    "component_not_found": "컴포넌트를 찾을 수 없습니다: {component}",
    "component_load_failed": "컴포넌트 로드에 실패했습니다: {component}",
    "dependency_missing": "누락된 종속성: {dependency}",
    "command_failed": "명령 실행에 실패했습니다.",
    "invalid_arguments": "제공된 인수가 유효하지 않습니다.",
    "unauthorized_operation": "승인되지 않은 작업입니다."
  },
  "help": {
    "help_README_0": "```bash\n# 빠른 설정 (대부분의 사용자에게 권장)\npython3 -m SuperClaude install\n```",
    "help_README_1": "```bash\n# 빠른 설정 (대부분의 사용자에게 권장)\nSuperClaude install\n```",
    "help_superclaude-user-guide_0": "- **제공하는 것**: 최신 문서, 코드 예시, 패턴\n- **예시**: `/build react-app --c7` 명령어로 React 모범 사례를 적용합니다.",
    "help_superclaude-user-guide_1": "### Detection Engine 🧠",
    "help_superclaude-user-guide_2": "```bash\n# 속도 향상을 위해 모든 MCP 서버 비활성화\n/sc:analyze large-codebase/ --no-mcp\n# → 40-60% 더 빠른 실행, 네이티브 도구만 사용\n```",
    "help_superclaude-user-guide_3": "```\n# 특정 MCP 조합 사용\n/sc:build ui-components/ --magic --c7 --no-seq\n# → UI 생성 + 문서, 복잡한 분석 건너뛰기\n```",
    "help_superclaude-user-guide_5": "- 대규모 작업 → `--uc` 및 `--delegate` 사용\n- 간단한 작업 → `--no-mcp` 및 `--answer-only` 사용\n- 중요 작업 → `--safe-mode` 및 `--validate` 사용",
    "help_superclaude-user-guide_6": "```bash\n# 대규모 작업의 경우 압축을 사용합니다.\n/sc:analyze huge-codebase/ --uc --delegate auto\n```",
    "help_superclaude-user-guide_7": "/sc:command --random-flags-that-look-important",
    "help_superclaude-user-guide_8": "```\n/sc:analyze large-project/ --verbose\n# → 상세 실행 단계를 표시합니다.\n```",
    "help_superclaude-user-guide_9": "/sc:analyze code/ --uc --c7  # 압축 + 문서화만\n```",
    "help_superclaude-user-guide_10": "```\n# 작업을 더 작은 덩어리로 나누기\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# /analyze entire-project/ 대신\n```",
    "help_superclaude-user-guide_11": "- 품질 게이트는 일관되고 신뢰할 수 있는 결과를 보장합니다.",
    "usage_analyze": "사용법: /sc:analyze [대상] --focus [도메인]",
    "usage_build": "사용법: /sc:build [대상] [옵션]",
    "usage_improve": "사용법: /sc:improve [대상] --focus [품질|성능|보안]",
    "feature_personas": "SuperClaude는 지능형 페르소나를 활용하여 전문적인 전문 지식을 제공합니다.",
    "feature_wave_mode": "Wave 모드는 복잡한 작업을 위한 다단계 오케스트레이션을 가능하게 합니다.",
    "feature_mcp_servers": "MCP 서버는 특정 도메인에 대해 향상된 기능을 제공합니다.",
    "getting_started": "SuperClaude 시작하기",
    "best_practices": "SuperClaude를 효과적으로 사용하는 모범 사례",
    "troubleshooting": "일반적인 문제 및 해결책",
    "example_basic": "기본 사용 예시",
    "example_advanced": "고급 사용 예시",
    "see_documentation": "자세한 내용은 문서를 참조하세요",
    "refer_to_guide": "사용자 가이드를 참조하세요"
  }
}