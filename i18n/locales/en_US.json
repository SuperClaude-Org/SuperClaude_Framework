{
  "metadata": {
    "language": "en_US",
    "name": "English",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:17:04.791436",
    "total_items": 118,
    "build_cost": 0.0,
    "quality_score": 1.0
  },
  "commands": {
    "document": "Generate precise, focused documentation for specific components, functions, or features.",
    "spawn": "Decompose complex requests into manageable subtasks and coordinate their execution.",
    "estimate": "Generate accurate development estimates for tasks, features, or projects based on complexity analysis.",
    "i18n": "allowed-tools: [Read, Write, Bash, TodoWrite]",
    "implement": "Implement features, components, and code functionality with intelligent expert activation and comprehensive development support.",
    "troubleshoot": "Systematically diagnose and resolve issues in code, builds, deployments, or system behavior.",
    "improve": "Apply systematic improvements to code quality, performance, maintainability, and best practices.",
    "explain": "Deliver clear, comprehensive explanations of code functionality, concepts, or system behavior.",
    "analyze": "Execute comprehensive code analysis across quality, security, performance, and architecture domains.",
    "workflow": "Analyze Product Requirements Documents (PRDs) and feature specifications to generate comprehensive, step-by-step implementation workflows with expert guidance, dependency mapping, and automated task orchestration.",
    "load": "Load and analyze project context, configurations, dependencies, and environment setup.",
    "index": "Create and maintain comprehensive project documentation, indexes, and knowledge bases.",
    "build": "Build, compile, and package projects with comprehensive error handling and optimization.",
    "git": "Execute Git operations with intelligent commit messages, branch management, and workflow optimization.",
    "task": "Execute complex tasks with intelligent workflow management, cross-session persistence, hierarchical task organization, and advanced orchestration capabilities.",
    "design": "Design system architecture, APIs, component interfaces, and technical specifications.",
    "cleanup": "Systematically clean up code, remove dead code, optimize imports, and improve project structure.",
    "test": "Execute tests, generate comprehensive test reports, and maintain test coverage standards."
  },
  "personas": {
    "architect": "Systems architecture specialist, long-term thinking focus, scalability expert",
    "frontend": "UX specialist, accessibility advocate, performance-conscious developer",
    "backend": "Reliability engineer, API specialist, data integrity focus",
    "analyzer": "Root cause specialist, evidence-based investigator, systematic analyst",
    "security": "Threat modeler, compliance expert, vulnerability specialist",
    "mentor": "Knowledge transfer specialist, educator, documentation advocate",
    "refactorer": "Code quality specialist, technical debt manager, clean code advocate",
    "performance": "Optimization specialist, bottleneck elimination expert, metrics-driven analyst",
    "qa": "Quality advocate, testing specialist, edge case detective",
    "devops": "Infrastructure specialist, deployment expert, reliability engineer"
  },
  "ui": {
    "ui_extracted_0": "\nUser interface utilities for SuperClaude installation system\nCross-platform console UI with colors and progress indication\n",
    "ui_extracted_21": "\n    RED = Fore.RED\n    GREEN = Fore.GREEN\n    YELLOW = Fore.YELLOW\n    BLUE = Fore.BLUE\n    MAGENTA = Fore.MAGENTA\n    CYAN = Fore.CYAN\n    WHITE = Fore.WHITE\n    RESET = Style.RESET_ALL\n    BRIGHT = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "Cross-platform progress bar with customizable display",
    "ui_extracted_26": "\n        Initialize progress bar\n        \n        Args:\n            total: Total number of items to process\n            width: Width of progress bar in characters\n            prefix: Text to display before progress bar\n            suffix: Text to display after progress bar\n        ",
    "ui_extracted_29": "\n        Update progress bar\n        \n        Args:\n            current: Current progress value\n            message: Optional message to display\n        ",
    "ui_extracted_34": "\n        \n        # Format progress line\n        if message:\n            status = f",
    "ui_extracted_36": "\n        \n        progress_line = (\n            f",
    "ui_extracted_38": "\n        )\n        \n        # Truncate if too long for terminal\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # Remove color codes for length calculation\n            plain_line = progress_line.replace(Colors.GREEN, ",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + ",
    "ui_extracted_42": "\n        \n        print(progress_line, end=",
    "ui_extracted_45": "\n        Increment progress by 1\n        \n        Args:\n            message: Optional message to display\n        ",
    "ui_extracted_48": "\n        Complete progress bar\n        \n        Args:\n            message: Completion message\n        ",
    "ui_extracted_56": "\n    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "\n        Initialize menu\n        \n        Args:\n            title: Menu title\n            options: List of menu options\n            multi_select: Allow multiple selections\n        ",
    "ui_extracted_58": "\n        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "\n        Display menu and get user selection\n        \n        Returns:\n            Selected option index (single) or list of indices (multi-select)\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = ",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else ",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == ",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "Display success message",
    "ui_extracted_110": "Display step progress",
    "welcome": "Welcome to SuperClaude installation wizard",
    "installation_success": "Installation completed successfully!",
    "installation_failed": "Installation failed. Please check the logs.",
    "select_components": "Please select components to install:",
    "config_saved": "Configuration saved successfully",
    "loading": "Loading...",
    "processing": "Processing request...",
    "analyzing": "Analyzing code...",
    "building": "Building project...",
    "completed": "Operation completed successfully",
    "cancelled": "Operation cancelled by user",
    "please_wait": "Please wait while we process your request",
    "choose_option": "Please choose an option:",
    "confirm_action": "Are you sure you want to continue?",
    "click_continue": "Click to continue",
    "ready": "Ready",
    "busy": "Busy",
    "connected": "Connected",
    "disconnected": "Disconnected"
  },
  "errors": {
    "error_settings_manager_0": "Cannot backup non-existent settings file",
    "file_not_found": "File not found: {filename}",
    "permission_denied": "Permission denied. Please check file permissions",
    "file_already_exists": "File already exists: {filename}",
    "directory_not_found": "Directory not found: {dirname}",
    "connection_failed": "Connection failed. Please check your network",
    "connection_timeout": "Connection timeout. Please try again",
    "api_error": "API request failed with error: {error}",
    "rate_limit_exceeded": "Rate limit exceeded. Please try again later",
    "invalid_config": "Invalid configuration format",
    "missing_config": "Configuration file not found",
    "config_parse_error": "Error parsing configuration file",
    "component_not_found": "Component not found: {component}",
    "component_load_failed": "Failed to load component: {component}",
    "dependency_missing": "Missing dependency: {dependency}",
    "command_failed": "Command execution failed",
    "invalid_arguments": "Invalid arguments provided",
    "unauthorized_operation": "Unauthorized operation"
  },
  "help": {
    "help_README_0": "```bash\n# Quick setup (recommended for most users)\npython3 -m SuperClaude install",
    "help_README_1": "```bash\n# Quick setup (recommended for most users)\nSuperClaude install",
    "help_superclaude-user-guide_0": "- **What it provides**: Up-to-date docs, code examples, patterns\n- **Example**: `/build react-app --c7` gets React best practices",
    "help_superclaude-user-guide_1": "### Detection Engine 🧠",
    "help_superclaude-user-guide_2": "```bash\n# Disable all MCP servers for speed\n/sc:analyze large-codebase/ --no-mcp\n# → 40-60% faster execution, native tools only",
    "help_superclaude-user-guide_3": "# Use specific MCP combinations\n/sc:build ui-components/ --magic --c7 --no-seq\n# → UI generation + docs, skip complex analysis\n```",
    "help_superclaude-user-guide_5": "- Large operations → Use `--uc` and `--delegate`\n- Simple tasks → Use `--no-mcp` and `--answer-only`\n- Critical operations → Use `--safe-mode` and `--validate`",
    "help_superclaude-user-guide_6": "```bash\n# For large operations, use compression\n/sc:analyze huge-codebase/ --uc --delegate auto",
    "help_superclaude-user-guide_7": "/sc:command --random-flags-that-look-important",
    "help_superclaude-user-guide_8": "/sc:analyze large-project/ --verbose\n# → Shows detailed execution steps\n```",
    "help_superclaude-user-guide_9": "/sc:analyze code/ --uc --c7  # Compression + documentation only\n```",
    "help_superclaude-user-guide_10": "# Break work into smaller chunks\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# Instead of /analyze entire-project/\n```",
    "help_superclaude-user-guide_11": "- Quality gates ensure consistent, reliable outcomes",
    "usage_analyze": "Usage: /sc:analyze [target] --focus [domain]",
    "usage_build": "Usage: /sc:build [target] [options]",
    "usage_improve": "Usage: /sc:improve [target] --focus [quality|performance|security]",
    "feature_personas": "SuperClaude uses intelligent personas to provide specialized expertise",
    "feature_wave_mode": "Wave mode enables multi-stage orchestration for complex operations",
    "feature_mcp_servers": "MCP servers provide enhanced capabilities for specific domains",
    "getting_started": "Getting started with SuperClaude",
    "best_practices": "Best practices for using SuperClaude effectively",
    "troubleshooting": "Common issues and solutions",
    "example_basic": "Basic usage example",
    "example_advanced": "Advanced usage example",
    "see_documentation": "See documentation for more details",
    "refer_to_guide": "Refer to the user guide"
  }
}