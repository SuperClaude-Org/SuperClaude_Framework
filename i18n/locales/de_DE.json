{
  "metadata": {
    "language": "de_DE",
    "name": "Deutsch",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:22:43.957329",
    "total_items": 118,
    "build_cost": 1e-06,
    "quality_score": 0.996
  },
  "commands": {
    "document": "Erstellen Sie präzise, fokussierte Dokumentationen für spezifische Komponenten, Funktionen oder Merkmale.",
    "spawn": "Zerlegen Sie komplexe Anfragen in überschaubare Unteraufgaben und koordinieren Sie deren Ausführung.",
    "estimate": "Erstellen Sie genaue Entwicklungsabschätzungen für Aufgaben, Funktionen oder Projekte basierend auf einer Komplexitätsanalyse.",
    "i18n": "allowed-tools: [Read, Write, Bash, TodoWrite]",
    "implement": "Implementieren Sie Funktionen, Komponenten und Code-Funktionalitäten mit intelligenter Expertenaktivierung und umfassender Entwicklungsunterstützung.",
    "troubleshoot": "Systematische Diagnose und Behebung von Problemen in Code, Builds, Bereitstellungen oder Systemverhalten.",
    "improve": "Wenden Sie systematische Verbesserungen an Codequalität, Leistung, Wartbarkeit und Best Practices an.",
    "explain": "Liefern Sie klare, umfassende Erklärungen zu Code-Funktionalität, Konzepten oder Systemverhalten.",
    "analyze": "Führen Sie eine umfassende Code-Analyse in den Bereichen Qualität, Sicherheit, Leistung und Architektur durch.",
    "workflow": "Analysieren Sie Produktanforderungsdokumente (PRDs) und Funktionsspezifikationen, um umfassende, schrittweise Implementierungsworkflows mit Expertenführung, Abhängigkeitszuordnung und automatisierter Aufgabenorchestrierung zu erstellen.",
    "load": "Laden und analysieren Sie Projektkontext, Konfigurationen, Abhängigkeiten und Umgebungseinrichtung.",
    "index": "Erstellen und pflegen Sie umfassende Projektdokumentationen, Indizes und Wissensdatenbanken.",
    "build": "Erstellen, kompilieren und paketieren Sie Projekte mit umfassender Fehlerbehandlung und Optimierung.",
    "git": "Führen Sie Git-Operationen mit intelligenten Commit-Nachrichten, Branch-Management und Workflow-Optimierung aus.",
    "task": "Führen Sie komplexe Aufgaben mit intelligentem Workflow-Management, sitzungsübergreifender Persistenz, hierarchischer Aufgabenorganisation und erweiterten Orchestrierungsfunktionen aus.",
    "design": "Entwerfen Sie Systemarchitektur, APIs, Komponentenschnittstellen und technische Spezifikationen.",
    "cleanup": "Systematisches Bereinigen von Code, Entfernen von totem Code, Optimieren von Importen und Verbessern der Projektstruktur.",
    "test": "Führen Sie Tests durch, erstellen Sie umfassende Testberichte und halten Sie die Testabdeckungsstandards ein."
  },
  "personas": {
    "architect": "Systemarchitekturspezialist, langfristig denkend, Skalierungsexperte",
    "frontend": "UX-Spezialist, Verfechter der Barrierefreiheit, leistungsorientierter Entwickler",
    "backend": "Zuverlässigkeitsingenieur, API-Spezialist, Fokus auf Datenintegrität",
    "analyzer": "Ursachenforscher, evidenzbasierter Ermittler, systematischer Analytiker",
    "security": "Bedrohungsmodellierer, Compliance-Experte, Schwachstellenspezialist",
    "mentor": "Spezialist für Wissenstransfer, Pädagoge, Verfechter der Dokumentation",
    "refactorer": "Code-Qualitätsspezialist, Manager technischer Schulden, Verfechter von Clean Code",
    "performance": "Optimierungsspezialist, Experte für Engpassbeseitigung, metrikgesteuerter Analytiker",
    "qa": "Qualitätsverfechter, Testspezialist, Edge-Case-Detektiv",
    "devops": "Infrastrukturspezialist, Deployment-Experte, Zuverlässigkeitsingenieur"
  },
  "ui": {
    "ui_extracted_0": "\nBenutzeroberflächen-Dienstprogramme für das SuperClaude-Installationssystem\nPlattformübergreifende Konsolen-Benutzeroberfläche mit Farben und Fortschrittsanzeige\n",
    "ui_extracted_21": "\n    ROT = Fore.RED\n    GRÜN = Fore.GREEN\n    GELB = Fore.YELLOW\n    BLAU = Fore.BLUE\n    MAGENTA = Fore.MAGENTA\n    CYAN = Fore.CYAN\n    WEISS = Fore.WHITE\n    ZURÜCKSETZEN = Style.RESET_ALL\n    HELL = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "Plattformübergreifende Fortschrittsanzeige mit anpassbarer Darstellung",
    "ui_extracted_26": "\n        Initialisiert die Fortschrittsanzeige\n        \n        Argumente:\n            total: Gesamtzahl der zu verarbeitenden Elemente\n            width: Breite der Fortschrittsanzeige in Zeichen\n            prefix: Text, der vor der Fortschrittsanzeige angezeigt wird\n            suffix: Text, der nach der Fortschrittsanzeige angezeigt wird\n        ",
    "ui_extracted_29": "\n        Aktualisiert die Fortschrittsanzeige\n        \n        Argumente:\n            current: Aktueller Fortschrittswert\n            message: Optionale Nachricht zur Anzeige\n        ",
    "ui_extracted_34": "\n        \n        # Fortschrittszeile formatieren\n        if message:\n            status = f",
    "ui_extracted_36": "\n        \n        progress_line = (\n            f",
    "ui_extracted_38": "\n        )\n        \n        # Abschneiden, wenn zu lang für das Terminal\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # Farbcodes für die Längenberechnung entfernen\n            plain_line = progress_line.replace(Colors.GREEN, ",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + ",
    "ui_extracted_42": "\n        \n        print(progress_line, end=",
    "ui_extracted_45": "\n        Erhöht den Fortschritt um 1\n        \n        Argumente:\n            message: Optionale Nachricht zur Anzeige\n        ",
    "ui_extracted_48": "\n        Schließt die Fortschrittsanzeige ab\n        \n        Argumente:\n            message: Abschlussnachricht\n        ",
    "ui_extracted_56": "\n    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "\n        Initialisiert das Menü\n        \n        Argumente:\n            title: Menütitel\n            options: Liste der Menüoptionen\n            multi_select: Mehrfachauswahl zulassen\n        ",
    "ui_extracted_58": "\n        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "\n        Zeigt das Menü an und erhält die Benutzerauswahl\n        \n        Gibt zurück:\n            Index der ausgewählten Option (einzeln) oder Liste der Indizes (Mehrfachauswahl)\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = ",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else ",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == ",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(\",",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "Erfolgsmeldung anzeigen",
    "ui_extracted_110": "Fortschritt des Schritts anzeigen",
    "welcome": "Willkommen beim SuperClaude Installationsassistenten",
    "installation_success": "Installation erfolgreich abgeschlossen!",
    "installation_failed": "Installation fehlgeschlagen. Bitte überprüfen Sie die Protokolle.",
    "select_components": "Bitte wählen Sie die zu installierenden Komponenten aus:",
    "config_saved": "Konfiguration erfolgreich gespeichert",
    "loading": "Wird geladen...",
    "processing": "Anfrage wird verarbeitet...",
    "analyzing": "Code wird analysiert...",
    "building": "Projekt wird erstellt...",
    "completed": "Vorgang erfolgreich abgeschlossen",
    "cancelled": "Vorgang vom Benutzer abgebrochen",
    "please_wait": "Bitte warten Sie, während wir Ihre Anfrage bearbeiten",
    "choose_option": "Bitte wählen Sie eine Option:",
    "confirm_action": "Möchten Sie wirklich fortfahren?",
    "click_continue": "Zum Fortfahren klicken",
    "ready": "Bereit",
    "busy": "Beschäftigt",
    "connected": "Verbunden",
    "disconnected": "Getrennt"
  },
  "errors": {
    "error_settings_manager_0": "Die Sicherung der nicht vorhandenen Einstellungsdatei ist nicht möglich",
    "file_not_found": "Datei nicht gefunden: {filename}",
    "permission_denied": "Zugriff verweigert. Bitte überprüfen Sie die Dateiberechtigungen",
    "file_already_exists": "Datei existiert bereits: {filename}",
    "directory_not_found": "Verzeichnis nicht gefunden: {dirname}",
    "connection_failed": "Verbindung fehlgeschlagen. Bitte überprüfen Sie Ihre Netzwerkverbindung",
    "connection_timeout": "Verbindungs-Timeout. Bitte versuchen Sie es erneut",
    "api_error": "API-Anfrage fehlgeschlagen mit Fehler: {error}",
    "rate_limit_exceeded": "Ratenbegrenzung überschritten. Bitte versuchen Sie es später erneut",
    "invalid_config": "Ungültiges Konfigurationsformat",
    "missing_config": "Konfigurationsdatei nicht gefunden",
    "config_parse_error": "Fehler beim Parsen der Konfigurationsdatei",
    "component_not_found": "Komponente nicht gefunden: {component}",
    "component_load_failed": "Laden der Komponente fehlgeschlagen: {component}",
    "dependency_missing": "Fehlende Abhängigkeit: {dependency}",
    "command_failed": "Befehlsausführung fehlgeschlagen",
    "invalid_arguments": "Ungültige Argumente angegeben",
    "unauthorized_operation": "Nicht autorisierte Operation"
  },
  "help": {
    "help_README_0": "```bash\n# Schnelleinrichtung (für die meisten Benutzer empfohlen)\npython3 -m SuperClaude install\n```",
    "help_README_1": "```bash\n# Schnelleinrichtung (für die meisten Benutzer empfohlen)\nSuperClaude install\n```",
    "help_superclaude-user-guide_0": "- **Was es bietet**: Aktuelle Dokumentation, Code-Beispiele, Muster\n- **Beispiel**: `/build react-app --c7` liefert React Best Practices",
    "help_superclaude-user-guide_1": "### Erkennungs-Engine 🧠",
    "help_superclaude-user-guide_2": "```bash\n# Deaktiviert alle MCP-Server für höhere Geschwindigkeit\n/sc:analyze large-codebase/ --no-mcp\n# → 40-60 % schnellere Ausführung, nur native Tools\n```",
    "help_superclaude-user-guide_3": "# Spezifische MCP-Kombinationen verwenden\n/sc:build ui-components/ --magic --c7 --no-seq\n# → UI-Generierung + Dokumentation, komplexe Analyse überspringen\n```",
    "help_superclaude-user-guide_5": "- Große Operationen → Verwenden Sie `--uc` und `--delegate`\n- Einfache Aufgaben → Verwenden Sie `--no-mcp` und `--answer-only`\n- Kritische Operationen → Verwenden Sie `--safe-mode` und `--validate`",
    "help_superclaude-user-guide_6": "```bash\n# Für große Operationen Komprimierung verwenden\n/sc:analyze huge-codebase/ --uc --delegate auto\n```",
    "help_superclaude-user-guide_7": "\"/sc:command --random-flags-that-look-important\"",
    "help_superclaude-user-guide_8": "/sc:analyze large-project/ --verbose\n# → Zeigt detaillierte Ausführungsschritte\n```",
    "help_superclaude-user-guide_9": "/sc:analyze code/ --uc --c7 # Nur Komprimierung + Dokumentation",
    "help_superclaude-user-guide_10": "# Arbeit in kleinere Abschnitte unterteilen\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# Anstatt /analyze gesamtes-projekt/\n```",
    "help_superclaude-user-guide_11": "- Quality Gates gewährleisten konsistente, zuverlässige Ergebnisse",
    "usage_analyze": "Verwendung: /sc:analyze [Ziel] --focus [Domäne]",
    "usage_build": "Verwendung: /sc:build [Ziel] [Optionen]",
    "usage_improve": "Verwendung: /sc:improve [Ziel] --focus [Qualität|Leistung|Sicherheit]",
    "feature_personas": "SuperClaude nutzt intelligente Personas, um spezialisiertes Fachwissen bereitzustellen.",
    "feature_wave_mode": "Der Wellenmodus ermöglicht eine mehrstufige Orchestrierung für komplexe Operationen.",
    "feature_mcp_servers": "\"MCP-Server bieten erweiterte Funktionen für spezifische Domänen.\"",
    "getting_started": "\"Erste Schritte mit SuperClaude\"",
    "best_practices": "Best Practices für die effektive Nutzung von SuperClaude",
    "troubleshooting": "Häufige Probleme und Lösungen",
    "example_basic": "Grundlegendes Anwendungsbeispiel",
    "example_advanced": "Fortgeschrittenes Anwendungsbeispiel",
    "see_documentation": "Weitere Details finden Sie in der Dokumentation",
    "refer_to_guide": "Siehe Benutzerhandbuch"
  }
}