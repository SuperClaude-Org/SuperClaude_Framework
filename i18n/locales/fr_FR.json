{
  "metadata": {
    "language": "fr_FR",
    "name": "Français",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:23:29.136471",
    "total_items": 118,
    "build_cost": 1e-06,
    "quality_score": 0.994
  },
  "commands": {
    "document": "Générer une documentation précise et ciblée pour des composants, fonctions ou fonctionnalités spécifiques.",
    "spawn": "Décomposer les requêtes complexes en sous-tâches gérables et coordonner leur exécution.",
    "estimate": "Générer des estimations de développement précises pour les tâches, fonctionnalités ou projets basées sur l'analyse de la complexité.",
    "i18n": "allowed-tools: [Read, Write, Bash, TodoWrite]",
    "implement": "Implémenter des fonctionnalités, des composants et des fonctions de code avec une activation experte intelligente et un support de développement complet.",
    "troubleshoot": "Diagnostiquer et résoudre systématiquement les problèmes dans le code, les builds, les déploiements ou le comportement du système.",
    "improve": "Appliquer des améliorations systématiques à la qualité du code, aux performances, à la maintenabilité et aux meilleures pratiques.",
    "explain": "Fournir des explications claires et complètes sur la fonctionnalité du code, les concepts ou le comportement du système.",
    "analyze": "Exécuter une analyse de code complète sur les domaines de la qualité, de la sécurité, des performances et de l'architecture.",
    "workflow": "Analyser les documents d'exigences produit (PRD) et les spécifications de fonctionnalités pour générer des flux de travail d'implémentation complets et étape par étape avec des conseils d'experts, une cartographie des dépendances et une orchestration automatisée des tâches.",
    "load": "Charger et analyser le contexte du projet, les configurations, les dépendances et la configuration de l'environnement.",
    "index": "Créer et maintenir une documentation de projet, des index et des bases de connaissances complètes.",
    "build": "Construire, compiler et packager des projets avec une gestion complète des erreurs et une optimisation.",
    "git": "Exécuter des opérations Git avec des messages de commit intelligents, une gestion des branches et une optimisation du flux de travail.",
    "task": "Exécuter des tâches complexes avec une gestion intelligente du flux de travail, une persistance inter-sessions, une organisation hiérarchique des tâches et des capacités d'orchestration avancées.",
    "design": "Concevoir l'architecture du système, les API, les interfaces de composants et les spécifications techniques.",
    "cleanup": "Nettoyer systématiquement le code, supprimer le code mort, optimiser les importations et améliorer la structure du projet.",
    "test": "Exécuter des tests, générer des rapports de test complets et maintenir les normes de couverture des tests."
  },
  "personas": {
    "architect": "Spécialiste en architecture de systèmes, axé sur la réflexion à long terme, expert en scalabilité",
    "frontend": "Spécialiste UX, défenseur de l'accessibilité, développeur soucieux de la performance",
    "backend": "Ingénieur fiabilité, spécialiste API, axé sur l'intégrité des données",
    "analyzer": "Spécialiste des causes profondes, enquêteur basé sur des preuves, analyste systématique",
    "security": "Modélisateur de menaces, expert en conformité, spécialiste des vulnérabilités",
    "mentor": "Spécialiste du transfert de connaissances, éducateur, défenseur de la documentation",
    "refactorer": "Spécialiste de la qualité du code, gestionnaire de la dette technique, défenseur du code propre",
    "performance": "Spécialiste de l'optimisation, expert en élimination des goulots d'étranglement, analyste axé sur les métriques",
    "qa": "Défenseur de la qualité, spécialiste des tests, détective des cas limites",
    "devops": "Spécialiste de l'infrastructure, expert en déploiement, ingénieur fiabilité"
  },
  "ui": {
    "ui_extracted_0": "Utilitaires d'interface utilisateur pour le système d'installation SuperClaude\nInterface utilisateur de console multiplateforme avec couleurs et indication de progression",
    "ui_extracted_21": "    RED = Fore.RED\n    GREEN = Fore.GREEN\n    YELLOW = Fore.YELLOW\n    BLUE = Fore.BLUE\n    MAGENTA = Fore.MAGENTA\n    CYAN = Fore.CYAN\n    WHITE = Fore.WHITE\n    RESET = Style.RESET_ALL\n    BRIGHT = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "Barre de progression multiplateforme avec affichage personnalisable",
    "ui_extracted_26": "        Initialise la barre de progression\n        \n        Args:\n            total: Nombre total d'éléments à traiter\n            width: Largeur de la barre de progression en caractères\n            prefix: Texte à afficher avant la barre de progression\n            suffix: Texte à afficher après la barre de progression\n        ",
    "ui_extracted_29": "        Met à jour la barre de progression\n        \n        Args:\n            current: Valeur de progression actuelle\n            message: Message optionnel à afficher\n        ",
    "ui_extracted_34": "        \n        # Formater la ligne de progression\n        if message:\n            status = f",
    "ui_extracted_36": "        \n        progress_line = (\n            f",
    "ui_extracted_38": "        )\n        \n        # Tronquer si trop long pour le terminal\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # Supprimer les codes couleur pour le calcul de la longueur\n            plain_line = progress_line.replace(Colors.GREEN, ",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + ",
    "ui_extracted_42": "\n        \n        print(progress_line, end=",
    "ui_extracted_45": "        Incrémente la progression de 1\n        \n        Args:\n            message: Message optionnel à afficher\n        ",
    "ui_extracted_48": "        Achève la barre de progression\n        \n        Args:\n            message: Message d'achèvement\n        ",
    "ui_extracted_56": "    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "        Initialise le menu\n        \n        Args:\n            title: Titre du menu\n            options: Liste des options du menu\n            multi_select: Autoriser les sélections multiples\n        ",
    "ui_extracted_58": "        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "        Affiche le menu et obtient la sélection de l'utilisateur\n        \n        Returns:\n            Index de l'option sélectionnée (simple) ou liste d'indices (sélection multiple)\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = ",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else ",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == ",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "Afficher le message de succès",
    "ui_extracted_110": "Afficher la progression de l'étape",
    "welcome": "Bienvenue dans l'assistant d'installation de SuperClaude",
    "installation_success": "Installation terminée avec succès !",
    "installation_failed": "L'installation a échoué. Veuillez vérifier les journaux.",
    "select_components": "Veuillez sélectionner les composants à installer :",
    "config_saved": "Configuration enregistrée avec succès",
    "loading": "Chargement...",
    "processing": "Traitement de la requête...",
    "analyzing": "Analyse du code...",
    "building": "Construction du projet...",
    "completed": "Opération terminée avec succès",
    "cancelled": "Opération annulée par l'utilisateur",
    "please_wait": "Veuillez patienter pendant que nous traitons votre requête",
    "choose_option": "Veuillez choisir une option :",
    "confirm_action": "Voulez-vous vraiment continuer ?",
    "click_continue": "Cliquer pour continuer",
    "ready": "Prêt",
    "busy": "Occupé",
    "connected": "Connecté",
    "disconnected": "Déconnecté"
  },
  "errors": {
    "error_settings_manager_0": "Impossible de sauvegarder un fichier de paramètres inexistant",
    "file_not_found": "Fichier introuvable : {filename}",
    "permission_denied": "Accès refusé. Veuillez vérifier les permissions du fichier",
    "file_already_exists": "Le fichier existe déjà : {filename}",
    "directory_not_found": "Répertoire introuvable : {dirname}",
    "connection_failed": "Connexion échouée. Veuillez vérifier votre réseau",
    "connection_timeout": "Délai de connexion dépassé. Veuillez réessayer",
    "api_error": "La requête API a échoué avec l'erreur : {error}",
    "rate_limit_exceeded": "Limite de débit dépassée. Veuillez réessayer plus tard",
    "invalid_config": "Format de configuration invalide",
    "missing_config": "Fichier de configuration introuvable",
    "config_parse_error": "Erreur lors de l'analyse du fichier de configuration",
    "component_not_found": "Composant introuvable : {component}",
    "component_load_failed": "Échec du chargement du composant : {component}",
    "dependency_missing": "Dépendance manquante : {dependency}",
    "command_failed": "L'exécution de la commande a échoué",
    "invalid_arguments": "Arguments fournis invalides",
    "unauthorized_operation": "Opération non autorisée"
  },
  "help": {
    "help_README_0": "```bash\n# Configuration rapide (recommandée pour la plupart des utilisateurs)\npython3 -m SuperClaude install\n```",
    "help_README_1": "```bash\n# Configuration rapide (recommandée pour la plupart des utilisateurs)\nSuperClaude install\n```",
    "help_superclaude-user-guide_0": "- **Ce qu'il fournit** : Documentation actualisée, exemples de code, modèles.\n- **Exemple** : `/build react-app --c7` applique les meilleures pratiques React.",
    "help_superclaude-user-guide_1": "### Moteur de Détection 🧠",
    "help_superclaude-user-guide_2": "```bash\n# Désactiver tous les serveurs MCP pour la vitesse\n/sc:analyze large-codebase/ --no-mcp\n# → Exécution 40-60% plus rapide, outils natifs uniquement\n```",
    "help_superclaude-user-guide_3": "```\n# Utiliser des combinaisons MCP spécifiques\n/sc:build ui-components/ --magic --c7 --no-seq\n# → Génération d'interface utilisateur + documentation, analyse complexe ignorée\n```",
    "help_superclaude-user-guide_5": "- Opérations de grande envergure → Utilisez `--uc` et `--delegate`\n- Tâches simples → Utilisez `--no-mcp` et `--answer-only`\n- Opérations critiques → Utilisez `--safe-mode` et `--validate`",
    "help_superclaude-user-guide_6": "```bash\n# Pour les opérations de grande envergure, utilisez la compression\n/sc:analyze huge-codebase/ --uc --delegate auto\n```",
    "help_superclaude-user-guide_7": "`/sc:command --random-flags-that-look-important`",
    "help_superclaude-user-guide_8": "```\n/sc:analyze large-project/ --verbose\n# → Affiche les étapes d'exécution détaillées\n```",
    "help_superclaude-user-guide_9": "\"/sc:analyze code/ --uc --c7  # Compression + documentation uniquement\n```\"",
    "help_superclaude-user-guide_10": "```\n# Découpez le travail en plus petits morceaux\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# Au lieu de /analyze entire-project/\n```",
    "help_superclaude-user-guide_11": "- Les **portes de qualité** garantissent des résultats cohérents et fiables.",
    "usage_analyze": "Usage : /sc:analyze [cible] --focus [domaine]",
    "usage_build": "Usage: /sc:build [cible] [options]",
    "usage_improve": "Usage: /sc:improve [cible] --focus [qualité|performance|sécurité]",
    "feature_personas": "SuperClaude utilise des personas intelligents pour fournir une expertise spécialisée.",
    "feature_wave_mode": "Le mode Wave permet une orchestration multi-étapes pour les opérations complexes.",
    "feature_mcp_servers": "Les serveurs MCP offrent des capacités améliorées pour des domaines spécifiques.",
    "getting_started": "\"Démarrer avec SuperClaude\"",
    "best_practices": "Meilleures pratiques pour utiliser efficacement SuperClaude",
    "troubleshooting": "Problèmes courants et solutions",
    "example_basic": "Exemple d'utilisation basique",
    "example_advanced": "Exemple d'utilisation avancée",
    "see_documentation": "Consultez la documentation pour plus de détails",
    "refer_to_guide": "Reportez-vous au guide de l'utilisateur"
  }
}