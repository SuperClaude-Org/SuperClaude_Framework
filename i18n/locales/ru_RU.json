{
  "metadata": {
    "language": "ru_RU",
    "name": "Русский",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:21:14.474199",
    "total_items": 118,
    "build_cost": 1e-06,
    "quality_score": 0.993
  },
  "commands": {
    "document": "Генерировать точную, сфокусированную документацию для конкретных компонентов, функций или возможностей.",
    "spawn": "Разбивать сложные запросы на управляемые подзадачи и координировать их выполнение.",
    "estimate": "Генерировать точные оценки разработки для задач, функций или проектов на основе анализа сложности.",
    "i18n": "allowed-tools: [Read, Write, Bash, TodoWrite]",
    "implement": "Реализовывать функции, компоненты и функциональность кода с интеллектуальной активацией экспертов и всесторонней поддержкой разработки.",
    "troubleshoot": "Систематически диагностировать и устранять проблемы в коде, сборках, развертываниях или поведении системы.",
    "improve": "Применять систематические улучшения к качеству кода, производительности, удобству сопровождения и лучшим практикам.",
    "explain": "Предоставлять четкие, всеобъемлющие объяснения функциональности кода, концепций или поведения системы.",
    "analyze": "Выполнять всесторонний анализ кода по областям качества, безопасности, производительности и архитектуры.",
    "workflow": "Анализировать документы с требованиями к продукту (PRD) и спецификации функций для генерации всеобъемлющих, пошаговых рабочих процессов реализации с экспертным руководством, сопоставлением зависимостей и автоматизированной оркестровкой задач.",
    "load": "Загружать и анализировать контекст проекта, конфигурации, зависимости и настройки среды.",
    "index": "Создавать и поддерживать всеобъемлющую проектную документацию, индексы и базы знаний.",
    "build": "Собирать, компилировать и упаковывать проекты с всесторонней обработкой ошибок и оптимизацией.",
    "git": "Выполнять операции Git с интеллектуальными сообщениями коммитов, управлением ветками и оптимизацией рабочего процесса.",
    "task": "Выполнять сложные задачи с интеллектуальным управлением рабочим процессом, сохранением состояния между сессиями, иерархической организацией задач и расширенными возможностями оркестровки.",
    "design": "Проектировать системную архитектуру, API, интерфейсы компонентов и технические спецификации.",
    "cleanup": "Систематически очищать код, удалять мертвый код, оптимизировать импорты и улучшать структуру проекта.",
    "test": "Выполнять тесты, генерировать всеобъемлющие отчеты о тестировании и поддерживать стандарты покрытия тестов."
  },
  "personas": {
    "architect": "Специалист по архитектуре систем, ориентированный на долгосрочное планирование, эксперт по масштабируемости",
    "frontend": "Специалист по UX, сторонник доступности, разработчик, заботящийся о производительности",
    "backend": "Инженер по надежности, специалист по API, ориентированный на целостность данных",
    "analyzer": "Специалист по первопричинам, следователь, основанный на доказательствах, системный аналитик",
    "security": "Специалист по моделированию угроз, эксперт по соответствию, специалист по уязвимостям",
    "mentor": "Специалист по передаче знаний, преподаватель, сторонник документации",
    "refactorer": "Специалист по качеству кода, менеджер технического долга, сторонник чистого кода",
    "performance": "Специалист по оптимизации, эксперт по устранению узких мест, аналитик, ориентированный на метрики",
    "qa": "Сторонник качества, специалист по тестированию, детектив по граничным случаям",
    "devops": "Специалист по инфраструктуре, эксперт по развертыванию, инженер по надежности"
  },
  "ui": {
    "ui_extracted_0": "\nУтилиты пользовательского интерфейса для системы установки SuperClaude\nКроссплатформенный консольный UI с цветами и индикацией прогресса\n",
    "ui_extracted_21": "\n    КРАСНЫЙ = Fore.RED\n    ЗЕЛЕНЫЙ = Fore.GREEN\n    ЖЕЛТЫЙ = Fore.YELLOW\n    СИНИЙ = Fore.BLUE\n    ПУРПУРНЫЙ = Fore.MAGENTA\n    ГОЛУБОЙ = Fore.CYAN\n    БЕЛЫЙ = Fore.WHITE\n    СБРОС = Style.RESET_ALL\n    ЯРКИЙ = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "Кроссплатформенный индикатор прогресса с настраиваемым отображением",
    "ui_extracted_26": "\n        Инициализация индикатора прогресса\n        \n        Аргументы:\n            total: Общее количество элементов для обработки\n            width: Ширина индикатора прогресса в символах\n            prefix: Текст, отображаемый перед индикатором прогресса\n            suffix: Текст, отображаемый после индикатора прогресса\n        ",
    "ui_extracted_29": "\n        Обновление индикатора прогресса\n        \n        Аргументы:\n            current: Текущее значение прогресса\n            message: Дополнительное сообщение для отображения\n        ",
    "ui_extracted_34": "\n        \n        # Форматирование строки прогресса\n        if message:\n            status = f",
    "ui_extracted_36": "\n        \n        progress_line = (\n            f",
    "ui_extracted_38": "\n        )\n        \n        # Обрезка, если слишком длинная для терминала\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # Удаление кодов цвета для расчета длины\n            plain_line = progress_line.replace(Colors.GREEN, \"\")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + \"...\"\n",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + \"...\"\n",
    "ui_extracted_42": "\n        \n        print(progress_line, end=\"\\r\")\n",
    "ui_extracted_45": "\n        Увеличение прогресса на 1\n        \n        Аргументы:\n            message: Дополнительное сообщение для отображения\n        ",
    "ui_extracted_48": "\n        Завершение индикатора прогресса\n        \n        Аргументы:\n            message: Сообщение о завершении\n        ",
    "ui_extracted_56": "\n    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "\n        Инициализация меню\n        \n        Аргументы:\n            title: Заголовок меню\n            options: Список опций меню\n            multi_select: Разрешить множественный выбор\n        ",
    "ui_extracted_58": "\n        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "\n        Отображение меню и получение выбора пользователя\n        \n        Возвращает:\n            Индекс выбранной опции (одиночный) или список индексов (множественный выбор)\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = \"[x]\" if i-1 in (self.selected or set()) else \"[ ]\"\n",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else \"[ ]\"\n",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f\"Введите номера опций для выбора (например, 1 3), 'd' для завершения: \", end=\"\")\n",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == \"d\":\n",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "Показать сообщение об успехе",
    "ui_extracted_110": "Показать ход выполнения шага",
    "welcome": "Добро пожаловать в мастер установки SuperClaude",
    "installation_success": "Установка успешно завершена!",
    "installation_failed": "Установка не удалась. Пожалуйста, проверьте логи.",
    "select_components": "Пожалуйста, выберите компоненты для установки:",
    "config_saved": "Конфигурация успешно сохранена",
    "loading": "Загрузка...",
    "processing": "Обработка запроса...",
    "analyzing": "Анализ кода...",
    "building": "Сборка проекта...",
    "completed": "Операция успешно завершена",
    "cancelled": "Операция отменена пользователем",
    "please_wait": "Пожалуйста, подождите, пока мы обрабатываем ваш запрос",
    "choose_option": "Пожалуйста, выберите опцию:",
    "confirm_action": "Вы уверены, что хотите продолжить?",
    "click_continue": "Нажмите, чтобы продолжить",
    "ready": "Готово",
    "busy": "Занято",
    "connected": "Подключено",
    "disconnected": "Отключено"
  },
  "errors": {
    "error_settings_manager_0": "Невозможно создать резервную копию несуществующего файла настроек",
    "file_not_found": "Файл не найден: {filename}",
    "permission_denied": "Доступ запрещен. Пожалуйста, проверьте права доступа к файлу",
    "file_already_exists": "Файл уже существует: {filename}",
    "directory_not_found": "Каталог не найден: {dirname}",
    "connection_failed": "Сбой подключения. Пожалуйста, проверьте вашу сеть",
    "connection_timeout": "Тайм-аут подключения. Пожалуйста, попробуйте еще раз",
    "api_error": "Запрос API завершился ошибкой: {error}",
    "rate_limit_exceeded": "Превышен лимит запросов. Пожалуйста, попробуйте позже",
    "invalid_config": "Неверный формат конфигурации",
    "missing_config": "Конфигурационный файл не найден",
    "config_parse_error": "Ошибка при разборе конфигурационного файла",
    "component_not_found": "Компонент не найден: {component}",
    "component_load_failed": "Не удалось загрузить компонент: {component}",
    "dependency_missing": "Отсутствует зависимость: {dependency}",
    "command_failed": "Выполнение команды завершилось сбоем",
    "invalid_arguments": "Предоставлены неверные аргументы",
    "unauthorized_operation": "Несанкционированная операция"
  },
  "help": {
    "help_README_0": "```bash\n# Быстрая установка (рекомендуется для большинства пользователей)\npython3 -m SuperClaude install\"",
    "help_README_1": "```bash\n# Быстрая установка (рекомендуется для большинства пользователей)\nSuperClaude install\n```",
    "help_superclaude-user-guide_0": "- **Что он предоставляет**: Актуальную документацию, примеры кода, шаблоны\n- **Пример**: `/build react-app --c7` применяет лучшие практики React",
    "help_superclaude-user-guide_1": "### Движок обнаружения 🧠",
    "help_superclaude-user-guide_2": "```bash\n# Отключить все серверы MCP для ускорения\n/sc:analyze large-codebase/ --no-mcp\n# → Ускорение выполнения на 40-60%, только нативные инструменты\"\n```",
    "help_superclaude-user-guide_3": "# Использование специфических комбинаций MCP\n/sc:build ui-components/ --magic --c7 --no-seq\n# → Генерация пользовательского интерфейса + документация, пропуск сложного анализа\n```",
    "help_superclaude-user-guide_5": "- Крупные операции → Используйте `--uc` и `--delegate`\n- Простые задачи → Используйте `--no-mcp` и `--answer-only`\n- Критические операции → Используйте `--safe-mode` и `--validate`",
    "help_superclaude-user-guide_6": "```bash\n# Для больших операций используйте сжатие\n/sc:analyze huge-codebase/ --uc --delegate auto\"",
    "help_superclaude-user-guide_7": "\"/sc:command --random-flags-that-look-important\"",
    "help_superclaude-user-guide_8": "```\n/sc:analyze large-project/ --verbose\n# → Отображает подробные шаги выполнения\n```",
    "help_superclaude-user-guide_9": "```\n/sc:analyze code/ --uc --c7  # Сжатие + только документация\n```",
    "help_superclaude-user-guide_10": "# Разбейте работу на более мелкие части\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# Вместо /analyze entire-project/\n```",
    "help_superclaude-user-guide_11": "- Шлюзы качества обеспечивают последовательные и надежные результаты",
    "usage_analyze": "Использование: /sc:analyze [цель] --focus [домен]",
    "usage_build": "Использование: /sc:build [цель] [опции]",
    "usage_improve": "Использование: /sc:improve [цель] --focus [качество|производительность|безопасность]",
    "feature_personas": "SuperClaude использует интеллектуальные персоны для предоставления специализированных экспертных знаний.",
    "feature_wave_mode": "Режим Wave обеспечивает многоступенчатую оркестрацию для сложных операций.",
    "feature_mcp_servers": "Серверы MCP предоставляют расширенные возможности для конкретных доменов.",
    "getting_started": "\"Начало работы с SuperClaude\"",
    "best_practices": "Лучшие практики эффективного использования SuperClaude",
    "troubleshooting": "Распространенные проблемы и их решения",
    "example_basic": "Пример базового использования",
    "example_advanced": "Пример расширенного использования",
    "see_documentation": "Подробную информацию см. в документации",
    "refer_to_guide": "Обратитесь к руководству пользователя"
  }
}