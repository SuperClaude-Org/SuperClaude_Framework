{
  "metadata": {
    "language": "ja_JP",
    "name": "日本語",
    "version": "1.0.0",
    "build_time": "2025-08-08T16:19:44.831351",
    "total_items": 118,
    "build_cost": 1e-06,
    "quality_score": 0.99
  },
  "commands": {
    "document": "特定のコンポーネント、機能、または特徴について、正確で焦点を絞ったドキュメントを生成します。",
    "spawn": "複雑な要求を管理可能なサブタスクに分解し、その実行を調整します。",
    "estimate": "複雑性分析に基づいて、タスク、機能、またはプロジェクトの正確な開発見積もりを生成します。",
    "i18n": "allowed-tools: [Read, Write, Bash, TodoWrite]",
    "implement": "インテリジェントなエキスパートアクティベーションと包括的な開発サポートにより、機能、コンポーネント、およびコード機能を実装します。",
    "troubleshoot": "コード、ビルド、デプロイ、またはシステム動作における問題を体系的に診断し、解決します。",
    "improve": "コード品質、パフォーマンス、保守性、およびベストプラクティスに体系的な改善を適用します。",
    "explain": "コードの機能、概念、またはシステム動作について、明確で包括的な説明を提供します。",
    "analyze": "品質、セキュリティ、パフォーマンス、およびアーキテクチャのドメインにわたる包括的なコード分析を実行します。",
    "workflow": "製品要件ドキュメント (PRD) と機能仕様を分析し、エキスパートガイダンス、依存関係マッピング、および自動化されたタスクオーケストレーションを備えた包括的で段階的な実装ワークフローを生成します。",
    "load": "プロジェクトのコンテキスト、構成、依存関係、および環境設定をロードして分析します。",
    "index": "包括的なプロジェクトドキュメント、インデックス、およびナレッジベースを作成および維持します。",
    "build": "包括的なエラー処理と最適化により、プロジェクトをビルド、コンパイル、およびパッケージ化します。",
    "git": "インテリジェントなコミットメッセージ、ブランチ管理、およびワークフロー最適化により、Git操作を実行します。",
    "task": "インテリジェントなワークフロー管理、セッション間の永続性、階層的なタスク編成、および高度なオーケストレーション機能により、複雑なタスクを実行します。",
    "design": "システムアーキテクチャ、API、コンポーネントインターフェース、および技術仕様を設計します。",
    "cleanup": "コードを体系的にクリーンアップし、デッドコードを削除し、インポートを最適化し、プロジェクト構造を改善します。",
    "test": "テストを実行し、包括的なテストレポートを生成し、テストカバレッジ基準を維持します。"
  },
  "personas": {
    "architect": "システムアーキテクチャスペシャリスト、長期的思考に注力、スケーラビリティのエキスパート",
    "frontend": "UXスペシャリスト、アクセシビリティ提唱者、パフォーマンスを意識した開発者",
    "backend": "信頼性エンジニア、APIスペシャリスト、データ整合性に注力",
    "analyzer": "根本原因スペシャリスト、証拠に基づいた調査者、体系的なアナリスト",
    "security": "脅威モデラー、コンプライアンスエキスパート、脆弱性スペシャリスト",
    "mentor": "知識移転スペシャリスト、教育者、ドキュメンテーション提唱者",
    "refactorer": "コード品質スペシャリスト、技術的負債マネージャー、クリーンコード提唱者",
    "performance": "最適化スペシャリスト、ボトルネック排除エキスパート、メトリクス駆動型アナリスト",
    "qa": "品質提唱者、テストスペシャリスト、エッジケース探偵",
    "devops": "インフラストラクチャスペシャリスト、デプロイメントエキスパート、信頼性エンジニア"
  },
  "ui": {
    "ui_extracted_0": "SuperClaudeインストールシステム用ユーザーインターフェースユーティリティ\n色と進捗表示を備えたクロスプラットフォームコンソールUI",
    "ui_extracted_21": "    RED = Fore.RED\n    GREEN = Fore.GREEN\n    YELLOW = Fore.YELLOW\n    BLUE = Fore.BLUE\n    MAGENTA = Fore.MAGENTA\n    CYAN = Fore.CYAN\n    WHITE = Fore.WHITE\n    RESET = Style.RESET_ALL\n    BRIGHT = Style.BRIGHT\n\n\nclass ProgressBar:\n    ",
    "ui_extracted_22": "カスタマイズ可能な表示を備えたクロスプラットフォームのプログレスバー",
    "ui_extracted_26": "        プログレスバーを初期化します\n        \n        引数:\n            total: 処理するアイテムの総数\n            width: プログレスバーの幅（文字数）\n            prefix: プログレスバーの前に表示するテキスト\n            suffix: プログレスバーの後に表示するテキスト\n        ",
    "ui_extracted_29": "        プログレスバーを更新します\n        \n        引数:\n            current: 現在の進捗値\n            message: 表示するオプションのメッセージ\n        ",
    "ui_extracted_34": "        \n        # 進捗行をフォーマット\n        if message:\n            status = f",
    "ui_extracted_36": "        \n        progress_line = (\n            f",
    "ui_extracted_38": "        )\n        \n        # ターミナルに対して長すぎる場合は切り詰める\n        max_length = self.terminal_width - 5\n        if len(progress_line) > max_length:\n            # 長さ計算のためにカラーコードを削除\n            plain_line = progress_line.replace(Colors.GREEN, ",
    "ui_extracted_41": ")\n            if len(plain_line) > max_length:\n                progress_line = progress_line[:max_length] + ",
    "ui_extracted_42": "\n        \n        print(progress_line, end=",
    "ui_extracted_45": "        進捗を1だけ増やします\n        \n        引数:\n            message: 表示するオプションのメッセージ\n        ",
    "ui_extracted_48": "        プログレスバーを完了します\n        \n        引数:\n            message: 完了メッセージ\n        ",
    "ui_extracted_56": "\n    \n    def __init__(self, title: str, options: List[str], multi_select: bool = False):\n        ",
    "ui_extracted_57": "        メニューを初期化します\n        \n        引数:\n            title: メニュータイトル\n            options: メニューオプションのリスト\n            multi_select: 複数選択を許可するかどうか\n        ",
    "ui_extracted_58": "        self.title = title\n        self.options = options\n        self.multi_select = multi_select\n        self.selected = set() if multi_select else None\n        \n    def display(self) -> Union[int, List[int]]:\n        ",
    "ui_extracted_59": "        メニューを表示し、ユーザー選択を取得します\n        \n        戻り値:\n            選択されたオプションのインデックス（単一）またはインデックスのリスト（複数選択）\n        ",
    "ui_extracted_62": " * len(self.title))\n        \n        for i, option in enumerate(self.options, 1):\n            if self.multi_select:\n                marker = ",
    "ui_extracted_63": " if i-1 in (self.selected or set()) else ",
    "ui_extracted_66": ")\n        \n        if self.multi_select:\n            print(f",
    "ui_extracted_69": ").strip().lower()\n                \n                if self.multi_select:\n                    if user_input == ",
    "ui_extracted_71": ":\n                        return []\n                    else:\n                        # Parse comma-separated numbers\n                        selections = []\n                        for part in user_input.split(\n",
    "ui_extracted_72": "):\n                            part = part.strip()\n                            if part.isdigit():\n                                idx = int(part) - 1\n                                if 0 <= idx < len(self.options):\n                                    selections.append(idx)\n                                else:\n                                    raise ValueError(f",
    "ui_extracted_74": ")\n                        return list(set(selections))  # Remove duplicates\n                else:\n                    if user_input.isdigit():\n                        choice = int(user_input) - 1\n                        if 0 <= choice < len(self.options):\n                            return choice\n                        else:\n                            print(f",
    "ui_extracted_77": ")\n                    return [] if self.multi_select else -1\n                else:\n                    print(f",
    "ui_extracted_100": ")\n\n\ndef display_success(message: str) -> None:\n    ",
    "ui_extracted_101": "成功メッセージを表示",
    "ui_extracted_110": "ステップの進捗を表示",
    "welcome": "SuperClaude インストールウィザードへようこそ",
    "installation_success": "インストールが正常に完了しました！",
    "installation_failed": "インストールに失敗しました。ログを確認してください。",
    "select_components": "インストールするコンポーネントを選択してください:",
    "config_saved": "設定が正常に保存されました",
    "loading": "読み込み中...",
    "processing": "リクエストを処理中...",
    "analyzing": "コードを解析中...",
    "building": "プロジェクトをビルド中...",
    "completed": "操作が正常に完了しました",
    "cancelled": "ユーザーによって操作がキャンセルされました",
    "please_wait": "リクエストを処理していますので、しばらくお待ちください",
    "choose_option": "オプションを選択してください:",
    "confirm_action": "続行しますか？",
    "click_continue": "クリックして続行",
    "ready": "準備完了",
    "busy": "ビジー",
    "connected": "接続済み",
    "disconnected": "切断済み"
  },
  "errors": {
    "error_settings_manager_0": "存在しない設定ファイルをバックアップできません",
    "file_not_found": "ファイルが見つかりません: {filename}",
    "permission_denied": "アクセスが拒否されました。ファイルのアクセス許可を確認してください",
    "file_already_exists": "ファイルは既に存在します: {filename}",
    "directory_not_found": "ディレクトリが見つかりません: {dirname}",
    "connection_failed": "接続に失敗しました。ネットワークを確認してください",
    "connection_timeout": "接続がタイムアウトしました。もう一度お試しください",
    "api_error": "APIリクエストがエラーで失敗しました: {error}",
    "rate_limit_exceeded": "レート制限を超過しました。後でもう一度お試しください",
    "invalid_config": "無効な設定形式です",
    "missing_config": "設定ファイルが見つかりません",
    "config_parse_error": "設定ファイルの解析中にエラーが発生しました",
    "component_not_found": "コンポーネントが見つかりません: {component}",
    "component_load_failed": "コンポーネントのロードに失敗しました: {component}",
    "dependency_missing": "不足している依存関係: {dependency}",
    "command_failed": "コマンドの実行に失敗しました",
    "invalid_arguments": "無効な引数が指定されました",
    "unauthorized_operation": "不正な操作です"
  },
  "help": {
    "help_README_0": "```bash\n# クイックセットアップ（ほとんどのユーザーに推奨）\npython3 -m SuperClaude install\n```",
    "help_README_1": "```bash\n# クイックセットアップ（ほとんどのユーザーに推奨）\nSuperClaude install\n```",
    "help_superclaude-user-guide_0": "- **提供するもの**: 最新のドキュメント、コード例、パターン\n- **例**: `/build react-app --c7` を実行すると、Reactのベストプラクティスが適用されます。",
    "help_superclaude-user-guide_1": "### 検出エンジン 🧠",
    "help_superclaude-user-guide_2": "```bash\n# 速度向上のため、すべてのMCPサーバーを無効化\n/sc:analyze large-codebase/ --no-mcp\n# → 実行速度が40-60%向上、ネイティブツールのみ使用\n```",
    "help_superclaude-user-guide_3": "```\n# 特定のMCP組み合わせを使用する\n/sc:build ui-components/ --magic --c7 --no-seq\n# → UI生成 + ドキュメント、複雑な分析をスキップ\n```",
    "help_superclaude-user-guide_5": "- 大規模な操作 → `--uc` と `--delegate` を使用\n- 単純なタスク → `--no-mcp` と `--answer-only` を使用\n- 重要な操作 → `--safe-mode` と `--validate` を使用",
    "help_superclaude-user-guide_6": "```bash\n# 大規模な操作には、圧縮を使用します\n/sc:analyze huge-codebase/ --uc --delegate auto\n```",
    "help_superclaude-user-guide_7": "`/sc:command --random-flags-that-look-important`",
    "help_superclaude-user-guide_8": "```\n/sc:analyze large-project/ --verbose\n# → 詳細な実行ステップを表示します\n```",
    "help_superclaude-user-guide_9": "`/sc:analyze code/ --uc --c7  # 圧縮 + ドキュメント化のみ`",
    "help_superclaude-user-guide_10": "# 作業をより小さなチャンクに分割する\n/sc:analyze module1/\n/sc:analyze module2/\n/sc:analyze module3/\n# /analyze entire-project/ の代わりに\n```",
    "help_superclaude-user-guide_11": "品質ゲートにより、一貫性のある信頼性の高い成果が保証されます。",
    "usage_analyze": "使用法: /sc:analyze [ターゲット] --focus [ドメイン]",
    "usage_build": "使用法: /sc:build [ターゲット] [オプション]",
    "usage_improve": "使用法: /sc:improve [対象] --focus [品質|パフォーマンス|セキュリティ]",
    "feature_personas": "SuperClaudeは、インテリジェントなペルソナを活用して、専門的な専門知識を提供します。",
    "feature_wave_mode": "Waveモードは、複雑な操作のための多段階オーケストレーションを可能にします。",
    "feature_mcp_servers": "MCPサーバーは、特定のドメイン向けに拡張された機能を提供します。",
    "getting_started": "SuperClaudeを始める",
    "best_practices": "SuperClaudeを効果的に使用するためのベストプラクティス",
    "troubleshooting": "よくある問題と解決策",
    "example_basic": "基本的な使用例",
    "example_advanced": "高度な使用例",
    "see_documentation": "詳細についてはドキュメントを参照してください",
    "refer_to_guide": "ユーザーガイドを参照してください"
  }
}